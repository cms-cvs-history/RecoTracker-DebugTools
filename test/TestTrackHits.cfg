process TestTrackHits = 
{
    ### keep the logging output to a nice level ###
    include "FWCore/MessageService/data/MessageLogger.cfi"
#    replace MessageLoggger.categories     = { "TestTrackHits" }
#    replace MessageLoggger.debugModules   = { "*" }
#    replace MessageLoggger.cout = { untracked string threshold = "DEBUG"
#	    untracked PSet INFO  = { untracked int32 limit = 0 }
#	    untracked PSet DEBUG = { untracked int32 limit = 0 }
#	    untracked PSet TestTrackHits = { untracked int32 limit = -1}
#	}
    
#    service = MessageLoggger {
#	untracked vstring destinations   = { "cout" }
#	untracked vstring categories     = { "TestTrackHits" }
#	untracked vstring debugModules   = { "*" }
#	untracked PSet debugmessages.txt = { untracked string threshold = "DEBUG"
#	    untracked PSet INFO  = { untracked int32 limit = 0 }
#	    untracked PSet DEBUG = { untracked int32 limit = 0 }
	#    untracked PSet TestTrackHits = { untracked int32 limit = -1}
#	}
#    }
   
    # CTF track fit with material
    include "RecoTracker/TrackProducer/data/CTFFinalFitWithMaterial.cff"
    replace ctfWithMaterialTracks.TrajectoryInEvent = true
    replace ctfWithMaterialTracks.Fitter = "KFFitter" 

    include "Validation/RecoTrack/data/SiStripTrackingRecHitsValid.cfi"
    include "Validation/RecoTrack/data/SiPixelTrackingRecHitsValid.cfi"
service = DaqMonitorROOTBackEnd{ }

    source = PoolSource 
    { 
	untracked vstring fileNames = {"rfio:/castor/cern.ch/user/c/cerati/data130pre5/SeedToTrackCandidates.root"}
#	untracked vstring fileNames = {"rfio:/castor/cern.ch/user/c/cerati/data130pre5/Tracks.root"}
#	untracked vstring fileNames = {"file:SeedToTrackCandidates.root"}
#	untracked vstring fileNames = {"file:SeedToTrackCandidatesDefaultCut.root"}
	untracked int32 maxEvents = -1
    }
    
    module test = TestTrackHits {
	string Propagator = "PropagatorWithMaterial" 
	string TTRHBuilder = "WithTrackAngle"
	string src = "ctfWithMaterialTracks"
	string updator = "KFUpdator"
	double mineta = 0.1
	double maxeta = 0.2
    }
    
    module out = AsciiOutputModule {}
    
    path p = 
    {
	ctfWithMaterialTracks,
	test #,
	#StripTrackingRecHitsValid
	#PixelTrackingRecHitsValid
    }
    
    endpath e = 
    {
	out
    }
}
