process TestTrackHits = 
{
    ### keep the logging output to a nice level ###
    include "FWCore/MessageService/data/MessageLogger.cfi"
    replace MessageLogger.categories     = { "TestTrackHits" }
    replace MessageLogger.debugModules   = { "*" }
    replace MessageLogger.cout = { 
	untracked string threshold = "DEBUG"
	untracked PSet INFO  = { untracked int32 limit = 0 }
	untracked PSet DEBUG = { untracked int32 limit = 0 }
	#untracked PSet TestTrackHits = { untracked int32 limit = -1}
    }
    replace MessageLogger.cerr = { untracked bool placeholder = true }
       
    # track refit with material
    include "RecoTracker/Configuration/data/RecoTracker.cff"
    include "RecoTracker/TrackProducer/data/RefitterWithMaterial.cff"
    replace TrackRefitter.TrajectoryInEvent = true
    #replace ctfWithMaterialTracks.Fitter = "KFFittingSmoother" 
    include "SimGeneral/MixingModule/data/mixNoPU.cfi"

    include "Validation/RecoTrack/data/SiStripTrackingRecHitsValid.cfi"
    include "Validation/RecoTrack/data/SiPixelTrackingRecHitsValid.cfi"
    service = DaqMonitorROOTBackEnd{ }

    untracked PSet maxEvents = {untracked int32 input = -1}
    source = PoolSource 
    { 
	untracked vstring fileNames = {"file:file.root"}
    }

    include "SimGeneral/MixingModule/data/mixNoPU.cfi"
    include "RecoTracker/Configuration/data/RecoTracker.cff"
    include "CalibTracker/Configuration/data/Tracker_FakeConditions.cff"

    include "SimTracker/TrackAssociation/data/TrackAssociatorByHits.cfi"
    include "Validation/RecoTrack/data/cuts.cff"

    #include "RecoLocalTracker/SiPixelRecHits/data/PixelCPETemplateReco.cfi"
    #replace ttrhbwr.PixelCPE = "PixelCPETemplateReco"
    #replace MeasurementTracker.PixelCPE = "PixelCPETemplateReco"
    #replace MeasurementTracker.StripCPE = "StripCPEfromTrackAngle"

    module test = TestTrackHits {
        string Propagator = "PropagatorWithMaterial"
        string TTRHBuilder = "WithTrackAngle"
        string src = "TrackRefitter"
        string tpname = "cutsTPFake" #"trackingParticles"
        string updator = "KFUpdator"
        string  out   = "test_track_hits.root"
    }
    
    module out = AsciiOutputModule {}
    
    path p = 
    {
	cutsTPFake,
	TrackRefitter,
	test 
    }
    
    endpath e = 
    {
	out
    }
}
