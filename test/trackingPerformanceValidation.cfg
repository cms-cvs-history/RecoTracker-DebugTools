process TkVal = 
{
  untracked PSet maxEvents = {untracked int32 input = NEVENT}

  #service = MessageLogger   {
  #	untracked vstring destinations   = { "cout" }
  #     untracked vstring categories     = { "TrackingRegressionTest" }
  #	untracked vstring debugModules   = { "ckfTrackCandidates","ctfWithMaterialTracks" }
  # 	untracked PSet cout          = { untracked string threshold = "DEBUG" 
  #	untracked PSet INFO          = { untracked int32 limit = 0 }
  #	untracked PSet DEBUG         = { untracked int32 limit = 0 }
  #	untracked PSet TrackingRegressionTest = { untracked int32 limit = 10000000}
  #       }
  #}
  include "FWCore/MessageService/data/MessageLogger.cfi"

  include "Configuration/ReleaseValidation/data/Services.cff"
  include "Configuration/StandardSequences/data/Reconstruction.cff"
  include "Configuration/StandardSequences/data/FakeConditions.cff"	
  include "Configuration/StandardSequences/data/Simulation.cff"
  #include "Configuration/StandardSequences/data/MixingNoPileUp.cff" 

  ### for the validator 
  # Track Associators
  include "SimTracker/TrackAssociation/data/TrackAssociatorByChi2.cfi"
  include "SimTracker/TrackAssociation/data/TrackAssociatorByHits.cfi"

  include "Validation/RecoTrack/data/cuts.cff"
  include "Validation/RecoTrack/data/cutsTPEffic.cfi"
  include "Validation/RecoTrack/data/cutsTPFake.cfi"
  include "Validation/RecoTrack/data/MultiTrackValidator.cff"


  source = PoolSource 
  { 
    untracked vstring fileNames = {'file:input.root'}
    untracked uint32 debugVebosity = 10
    untracked bool   debugFlag     = true
  }


  ##############################
  #replace MessageLogger.cout.placeholder = false
  module pts = PathTimerInserter{}
  service = PathTimerService{}
  include "RecoTracker/DebugTools/test/SAMPLE.cff"

  ### new tracking 
  #include "newTrackingConfiguration.cff"	

  ### filtering 
  #include "RecoTracker/FinalTrackSelectors/data/cutsCKF.cfi"
  #include "RecoTracker/FinalTrackSelectors/data/selectCKF.cfi"

  ### merging
  module mergedTracks = TrackMerger {
     VInputTag src = { "firstvtxFilt:","secondvtxFilt:",
                       "thirdvtxFilt:","fourthvtxFilt:" }
  }


  ### validation
  replace multiTrackValidator.out = "val.SAMPLE.root"	
  replace multiTrackValidator.associators = {"TrackAssociatorByHits"}
  replace multiTrackValidator.label = {ctfWithMaterialTracks}
  #replace multiTrackValidator.label = {mergedTracks}

  #replace cutsTPEffic.src = mergedtruth:MergedTrackTruth
  replace cutsTPFake.ptMin = 0.001
  replace cutsTPFake.minRapidity = -3.0
  replace cutsTPFake.maxRapidity = +3.0

  ###############################


  module out = PoolOutputModule 
  {
    untracked string fileName = 'output.SAMPLE.root'
    untracked vstring outputCommands = 
      {
        "drop *",
        #"keep *_g4SimHits_TrackerHits*_*",
        #"keep SimVertexs_g4SimHits_*_*",
        #"keep SimTracks_g4SimHits_*_*",
        #"keep *_trackingtruthprod_*_*",
        #"keep PixelDigiSimLink*_*_*_*",
        #"keep StripDigiSimLink*_*_*_*",
        #"keep *_siPixelClusters_*_*",
        #"keep *_siStripClusters_*_*",
        #"keep *_cmsTracks_*_*",
        #"keep *_pixelVertices_*_*",
        #"keep recoTracks_pixelTracks_*_*",
        #"keep *_ctfWithMaterialTracks_*_*",
        "keep HLTPerformanceInfo_*_*_*"
      }
  }      

  sequence digi2track =   {
   siPixelClusters,siPixelRecHits, siStripClusters,siStripMatchedRecHits,
   globalMixedSeeds,ckfTrackCandidates,ctfWithMaterialTracks,
   cutsCKF,cutsTPEffic,cutsTPFake,
   multiTrackValidator
  }


  sequence re_tracking =   {
   globalMixedSeeds,
   ckfTrackCandidates,ctfWithMaterialTracks,
   cutsCKF,cutsTPEffic,cutsTPFake,
   multiTrackValidator,
   pts
  }

  sequence iterative = {
	first,second,third,fourth,        
        mergedTracks,
        cutsTPEffic,cutsTPFake,
        multiTrackValidator,
	pts
  }
 
  include "SimGeneral/TrackingAnalysis/data/trackingParticles.cfi"
  include "SimGeneral/MixingModule/data/mixNoPU.cfi"

  sequence only_validation = {
   #mix,trackingParticles,
   cutsCKF,cutsTPEffic,cutsTPFake,
   multiTrackValidator
  }

  sequence newConfiguration = {
     newTracking,
     cutsTPEffic,cutsTPFake,
     multiTrackValidator,
     pts	
  }  
                     
  path p = {
   SEQUENCE	
  }


  endpath e = 
  {
    out
  }
}
